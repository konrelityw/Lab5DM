F = [1, 1, 0, 0, 0, 1, 0, 0]
dualF = []
truthTable = [[0, 0, 0, 1],
              [0, 0, 1, 1],
              [0, 1, 0, 0],
              [0, 1, 1, 0],
              [1, 0, 0, 0],
              [1, 0, 1, 1],
              [1, 1, 0, 0],
              [1, 1, 1, 0]]
print(" x  y  z  F")
for row in truthTable:
    print(row)


def dualFunc(F):
    reversedF = reversed(F)
    for i in reversedF:
        if i == 0:
            dualF.append(1)
        else:
            dualF.append(0)
    print("Двоїста функція:")
    print(dualF)
    if dualF == F:
        print("Функція самодовоїста")
    else:
        print("Функція не самодовоїста")


def dDNF(truthTable):
    ddnf = "f(x1, x2, x3) = "
    for i in range(len(truthTable)):
        if truthTable[i][3] == 1:
            ddnf += "("
            for j in range(len(truthTable[i]) - 1):
                if truthTable[i][j] == 1:
                    ddnf += ("x" + str(j + 1))
                else:
                    ddnf += ("¬x" + str(j + 1))

                if j + 1 != 3:
                    ddnf += str(" ∧ ")

            ddnf += ") v "

    newDdnf = ddnf[:len(ddnf) - 3]

    print(newDdnf)




def dKNF(truthTable):
    dknf = "f(x1, x2, x3) = "
    for i in range(len(truthTable)):
        if truthTable[i][3] == 0:
            dknf += "("
            for j in range(len(truthTable[i]) - 1):
                if truthTable[i][j] == 0:
                    dknf += ("x" + str(j + 1))
                else:
                    dknf += ("¬x" + str(j + 1))

                if j + 1 != 3:
                    dknf += str(" v ")

            dknf += ") ∧ "

    newDknf = dknf[:len(dknf) - 3]

    print(newDknf)


def polynomial(truthTable):
    polynomial = "f(x1, x2, x3) = "
    for i in range(len(truthTable)):
        if truthTable[i][3] == 1:
            polynomial += "("
            for j in range(len(truthTable[i]) - 1):
                if truthTable[i][j] == 1:
                    polynomial += ("x" + str(j + 1))
                else:
                    polynomial += ("x" + str(j + 1) + " ⊕ 1")

                if j + 1 != 3:
                    polynomial += str(" ∧ ")

            polynomial += ") ⊕ "

    ZhegalkinPolynomial = polynomial[:len(polynomial) - 3]
    print(ZhegalkinPolynomial)
    lineal = " ∧ "
    if lineal in ZhegalkinPolynomial:
        print("Функція не лінійна")
    else:
        print("Функція лінійна")


def ifConst0(F):
    result = False
    if F[0]==0:
        result = True
    return result


def ifConst1(F):
    result = False
    if F[7] == 1:
        result = True
    return result


def ifMonotonous(truthTable):
    count = 0
    result = True

    for i in range(len(truthTable)):
        for j in range(len(truthTable)):
            for k in range(len(truthTable[i])):
                if truthTable[i][k] >= truthTable[j][k]:
                    count += 1
            if ((count == 3) and (F[i] < F[j])):
                result = False

    return result


print(dualFunc(F))
print("Досконала диз'юнктивна нормальна форма")
print(dDNF(truthTable))
print("Досконала кон'юнктивна нормальна форма")
print(dKNF(truthTable))
print("Поліном Жегалкіна")
print(polynomial(truthTable))
print("Функція зберігає константу 0?")
print(ifConst0(F))
print("Функція зберігає константу 1?")
print(ifConst1(F))
print("Функція монотонна?")
print(ifMonotonous(truthTable))
